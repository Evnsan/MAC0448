# EP4 - SIMULADOR DE REDES ###################################################
Grupo:
Evandro Augusto Nunes Sanches N.USP 5388861
Pedro Ferreira Alexandre N° USP 7577448
##############################################################################
# Conteúdo deste pacote ######################################################
-universo.py
-host.py
-router.py
-cabecalhoUdp.py
-camadaAplicacao.py
-camadaRedes.py
-camadaTransporte.py
-datagrama.py
-segmento.py
-mensagem.py
-parser.py
-porta.py
-LEIAME
-slides.pdf
##############################################################################
# Visão geral do simulador ###################################################
Baseado no modelo de máquinas virtuais, este simulador tem seu código central
escrito no arquivo universo.py. Neste trecho o sistema é criado, instanciando
o parser para o arquivo de configurações e depois executando ações específicas 
ao ler as linhas do arquivo (comandos descritos no enunciado do EP) para
configurar o ambiente virtual.
Com essa idéia inicial de configuração, as ações específicas executadas pelo
sistema, que chamaremos de "universo", podem ser instaciar outros objetos ou
configurar o comportamento desses.
Apesar de haverem outras classes no pacote deste Programa, ao ler o arquivo
de configuração o sistema cria basicamente 3 tipos de objetos:
-Hosts
-Roteadores
-Enlaces
Uma vez criados, cada um desses objetos é adicionado em uma lista de
elementos.
Vale ressaltar que quando a linha do arquivo de configuracao lida contiver o 
comando "simulate", o sistema irá enviar para o host executor da ação tal
comando. Dentro do Host executor, o comando será armazenado em uma lista
ordenada por hora de execução, para ser realizada no momento marcado.
Sobre o comando Finish, quando o relogio interno do universo (será explicado
em detalhes mais adiante) marcar tempo igual ao horário marcado no comando, a
simulacao será interrompida.
Após todos os comandos serem lidos e o ambiente configurado, o "universo"
inicia seu relógio interno. Este relógio é um contador de passos executados
por cada elemento do sistema. Ou seja, o relógio, inicialmente em zero, será
incrementado após todos os elementos do sistema terem executado um passo. Cada
unidade deste relógio simboliza um milisegundo.
Para representar a mensagem sendo empacotada através das camadas utilizamos os
seguintes objetos:
-Mensagem para representar o formato da mensagem após passar pela camada de 
aplicação.
-Segmento para representar o empacotamento realizado na camada de transporte.
-Datagrama para representar o empacotamento na camada de redes.
Transferimos as responsabilidades das camadas para suas respectivas classes:
-CamadaAplicacao - responsável pelas aplicações e formação do objeto Mensagem.
-CamadaTransporte - resoponsável pelos protocolos UDP e TCP, e gerenciamento
do objeto Segmento.
-CamadaRedes - responsável pelo gerenciamento do objeto Datagrama.
##############################################################################


